{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { setCredentials, logOut } from \"../../features/auth/authSlice\";\nconst baseQuery = fetchBaseQuery({\n  baseUrl: \"http://localhost:3333\",\n  mode: \"cors\",\n  credentials: \"include\",\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    const token = getState().auth.token;\n\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n\n    return headers;\n  }\n});\n\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  let result = await baseQuery(args, api, extraOptions); // if (result?.error?.originalStatus === 403) {\n  //   console.log(\"sending refresh token\");\n  //   // send refresh token to get new access token\n  //   const refreshResult = await baseQuery(\"/refresh\", api, extraOptions);\n  //   console.log(refreshResult);\n  //   if (refreshResult?.data) {\n  //     const user = api.getState().auth.user;\n  //     // store the new token\n  //     api.dispatch(setCredentials({ ...refreshResult.data, user }));\n  //     // retry the original query with new access token\n  //     result = await baseQuery(args, api, extraOptions);\n  //   } else {\n  //     api.dispatch(logOut());\n  //   }\n  // }\n\n  return result;\n};\n\nexport const apiSlice = createApi({\n  baseQuery: baseQueryWithReauth,\n  endpoints: builder => ({})\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","setCredentials","logOut","baseQuery","baseUrl","mode","credentials","prepareHeaders","headers","getState","token","auth","set","baseQueryWithReauth","args","api","extraOptions","result","apiSlice","endpoints","builder"],"sources":["/Users/tomas/Documents/Github/ababa-task/client/src/app/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { setCredentials, logOut } from \"../../features/auth/authSlice\";\n\nconst baseQuery = fetchBaseQuery({\n  baseUrl: \"http://localhost:3333\",\n  mode: \"cors\",\n  credentials: \"include\",\n  prepareHeaders: (headers, { getState }) => {\n    const token = getState().auth.token;\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    return headers;\n  },\n});\n\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  let result = await baseQuery(args, api, extraOptions);\n\n  // if (result?.error?.originalStatus === 403) {\n  //   console.log(\"sending refresh token\");\n  //   // send refresh token to get new access token\n  //   const refreshResult = await baseQuery(\"/refresh\", api, extraOptions);\n  //   console.log(refreshResult);\n  //   if (refreshResult?.data) {\n  //     const user = api.getState().auth.user;\n  //     // store the new token\n  //     api.dispatch(setCredentials({ ...refreshResult.data, user }));\n  //     // retry the original query with new access token\n  //     result = await baseQuery(args, api, extraOptions);\n  //   } else {\n  //     api.dispatch(logOut());\n  //   }\n  // }\n\n  return result;\n};\n\nexport const apiSlice = createApi({\n  baseQuery: baseQueryWithReauth,\n  endpoints: (builder) => ({}),\n});\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AACA,SAASC,cAAT,EAAyBC,MAAzB,QAAuC,+BAAvC;AAEA,MAAMC,SAAS,GAAGH,cAAc,CAAC;EAC/BI,OAAO,EAAE,uBADsB;EAE/BC,IAAI,EAAE,MAFyB;EAG/BC,WAAW,EAAE,SAHkB;EAI/BC,cAAc,EAAE,CAACC,OAAD,WAA2B;IAAA,IAAjB;MAAEC;IAAF,CAAiB;IACzC,MAAMC,KAAK,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,KAA9B;;IACA,IAAIA,KAAJ,EAAW;MACTF,OAAO,CAACI,GAAR,CAAY,eAAZ,EAA8B,UAASF,KAAM,EAA7C;IACD;;IACD,OAAOF,OAAP;EACD;AAV8B,CAAD,CAAhC;;AAaA,MAAMK,mBAAmB,GAAG,OAAOC,IAAP,EAAaC,GAAb,EAAkBC,YAAlB,KAAmC;EAC7D,IAAIC,MAAM,GAAG,MAAMd,SAAS,CAACW,IAAD,EAAOC,GAAP,EAAYC,YAAZ,CAA5B,CAD6D,CAG7D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAOC,MAAP;AACD,CApBD;;AAsBA,OAAO,MAAMC,QAAQ,GAAGnB,SAAS,CAAC;EAChCI,SAAS,EAAEU,mBADqB;EAEhCM,SAAS,EAAGC,OAAD,KAAc,EAAd;AAFqB,CAAD,CAA1B"},"metadata":{},"sourceType":"module"}