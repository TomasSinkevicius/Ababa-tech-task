{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => ({\n        url: \"/auth/local/signin\",\n        method: \"POST\",\n        body: {\n          username: \"Tomas\",\n          password: \"12345\"\n        }\n      })\n    })\n  })\n});\nexport const pokemonApi = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"http://localhost:3333\"\n  }),\n  // Set the baseUrl for every endpoint below\n  endpoints: builder => ({\n    getPokemonByName: builder.query({\n      query: name => `pokemon/${name}` // Will make a request like https://pokeapi.co/api/v2/pokemon/bulbasaur\n\n    }),\n    updatePokemon: builder.mutation({\n      query: _ref => {\n        let {\n          name,\n          patch\n        } = _ref;\n        return {\n          url: `pokemon/${name}`,\n          method: \"PATCH\",\n          // When performing a mutation, you typically use a method of PATCH/PUT/POST/DELETE for REST endpoints\n          body: patch // fetchBaseQuery automatically adds `content-type: application/json` to the Headers and calls `JSON.stringify(patch)`\n\n        };\n      }\n    })\n  })\n});\nexport const {\n  useLoginMutation\n} = authApiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","authApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","method","body","username","password","pokemonApi","baseQuery","baseUrl","getPokemonByName","name","updatePokemon","patch","useLoginMutation"],"sources":["/Users/tomas/Documents/Github/ababa-task/client/src/features/auth/authApiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/dist/query\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    login: builder.mutation({\n      query: (credentials) => ({\n        url: \"/auth/local/signin\",\n        method: \"POST\",\n        body: { username: \"Tomas\", password: \"12345\" },\n      }),\n    }),\n  }),\n});\n\nexport const pokemonApi = createApi({\n  baseQuery: fetchBaseQuery({ baseUrl: \"http://localhost:3333\" }), // Set the baseUrl for every endpoint below\n  endpoints: (builder) => ({\n    getPokemonByName: builder.query({\n      query: (name: string) => `pokemon/${name}`, // Will make a request like https://pokeapi.co/api/v2/pokemon/bulbasaur\n    }),\n    updatePokemon: builder.mutation({\n      query: ({ name, patch }) => ({\n        url: `pokemon/${name}`,\n        method: \"PATCH\", // When performing a mutation, you typically use a method of PATCH/PUT/POST/DELETE for REST endpoints\n        body: patch, // fetchBaseQuery automatically adds `content-type: application/json` to the Headers and calls `JSON.stringify(patch)`\n      }),\n    }),\n  }),\n});\n\nexport const { useLoginMutation } = authApiSlice;\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,6BAA1C;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,OAAO,MAAMC,YAAY,GAAGD,QAAQ,CAACE,eAAT,CAAyB;EACnDC,SAAS,EAAGC,OAAD,KAAc;IACvBC,KAAK,EAAED,OAAO,CAACE,QAAR,CAAiB;MACtBC,KAAK,EAAGC,WAAD,KAAkB;QACvBC,GAAG,EAAE,oBADkB;QAEvBC,MAAM,EAAE,MAFe;QAGvBC,IAAI,EAAE;UAAEC,QAAQ,EAAE,OAAZ;UAAqBC,QAAQ,EAAE;QAA/B;MAHiB,CAAlB;IADe,CAAjB;EADgB,CAAd;AADwC,CAAzB,CAArB;AAYP,OAAO,MAAMC,UAAU,GAAGhB,SAAS,CAAC;EAClCiB,SAAS,EAAEhB,cAAc,CAAC;IAAEiB,OAAO,EAAE;EAAX,CAAD,CADS;EAC+B;EACjEb,SAAS,EAAGC,OAAD,KAAc;IACvBa,gBAAgB,EAAEb,OAAO,CAACG,KAAR,CAAc;MAC9BA,KAAK,EAAGW,IAAD,IAAmB,WAAUA,IAAK,EADX,CACc;;IADd,CAAd,CADK;IAIvBC,aAAa,EAAEf,OAAO,CAACE,QAAR,CAAiB;MAC9BC,KAAK,EAAE;QAAA,IAAC;UAAEW,IAAF;UAAQE;QAAR,CAAD;QAAA,OAAsB;UAC3BX,GAAG,EAAG,WAAUS,IAAK,EADM;UAE3BR,MAAM,EAAE,OAFmB;UAEV;UACjBC,IAAI,EAAES,KAHqB,CAGd;;QAHc,CAAtB;MAAA;IADuB,CAAjB;EAJQ,CAAd;AAFuB,CAAD,CAA5B;AAgBP,OAAO,MAAM;EAAEC;AAAF,IAAuBpB,YAA7B"},"metadata":{},"sourceType":"module"}